plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge();
}

/*def generatedResources = project(":forge").file("src/generated/resources")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}*/


//remapJar {
//    atAccessWideners.add('tardis_refined.accesswidener')
//}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "tardis_refined-common.mixins.json"
        mixinConfig "tardis_refined.mixins.json"

        dataGen {
            mod "tardis_refined"
        }

    }

}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven { url "https://maven.minecraftforge.net" }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //   modCompileOnly "curse.maven:worldedit-225608:${world_edit_version}"
//    modCompileOnly "curse.maven:structure-expansion-398430:${structure_expansion_version}"

//    modCompileOnly "curse.maven:configured-457570:${configured_version}"
    //   modCompileOnly "curse.maven:jei-238222:${jei_version}"

    compileOnly "curse.maven:immersive-portals-355440:${immersive_portals_forge_version}"

    // With ForgeGradle 5, use the runtimeOnly configuration
    //runtimeOnly("me.djtheredstoner:DevAuth-${dev_auth_module_forge}:${dev_auth_forge_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors: mod_authors, credits:credits, mod_description: mod_description,
                         display_url:display_url, logo_file:logo_file,
                         issue_tracker_url: issue_tracker_url,
                         // update_json_url: update_json_url,
                         license: license,
                         forge_loader_version_range: forge_loader_version_range,
                         forge_minecraft_version_range: forge_minecraft_version_range,
                         forge_loader_version_range: forge_loader_version_range,
                         pack_format: pack_format,
                         forge_resource_pack_format: forge_resource_pack_format,
                         forge_data_pack_format: forge_data_pack_format,
                         // forge_immersive_portals_version_range: forge_immersive_portals_version_range
                         // ,display_test_type: display_test_type
]


processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}
shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly // see [http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html](http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html)
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release = 17
}
publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "_" + project.name
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://maven.craig.software/snapshots/"
            credentials {
                username = project.findProperty("MAVEN_REPO_USERNAME") ?: System.getenv("MAVEN_REPO_USERNAME") ?: ""
                password = project.findProperty("MAVEN_REPO_PASSWORD") ?: System.getenv("MAVEN_REPO_PASSWORD") ?: ""
            }
        }
    }
}

